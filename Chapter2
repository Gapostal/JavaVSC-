1、关键字区别

1）抽象方法和虚方法

C++：

关键字：virtual

只用于方法

Java：

关键字：abstract

可用于class和方法

如果一个类包含抽象方法，则该类必须声明为抽象类。抽象类中可以包含非抽象方法。

2）class引用

C++：

关键字：include

#include "BinaryTreeUtil.h"
#include <iostream>

Java：

关键字：import

import java.io.*;（具体到路径）

import utils.PersonUtils;（具体到class）

3）常量定义

C++：

使用const

const double PI = 3.14;

Java：

使用final

final double PI = 3.14;

final还可用于修饰类，方法

    修饰类的时候，表示类不能被继承

    修饰方法的时候，表示方法不能被继承重新定义

关于const

const是Java中预留的关键字，当前没在使用

4）控制台输出

C++：

printf()和cout<<

Java：

System.out.println()

 

2、流程控制

1）for增强

C++：

    int input_array[] = { 1,2,3 };
    for (auto i : input_array)
    {
        cout << i << endl;
    }

Java：

int [] numbers = {10, 20, 30, 40, 50};
      for(int x : numbers ){
         System.out.print( x );
      }

 

3、比较函数

C++：返回是bool型

sort(costs.begin(), costs.end(), cmp);

bool cmp(vector<int>& vector1, vector<int>& vector2)
{
    return vector2[2] > vector1[2];
}

Java：返回是int型

@Override
    public int compare(SomeInfo o1, SomeInfo o2) 
    {
        //这个表示大的排前面。如果后面的大于前面的，那么后面会和前面的交换位置。
        return o2.getSortValue() - o1.getSortValue();
    }

 

4、具体例子

1）打印数组中每个元素

C++：

void printArray(int[] input_array, int length)

在C++中，必须传入一个长度信息，才能够获取输入的数组长度

Java：

void printArray(int[] input_array)

在Java中，可以使用input_array.length获取数组长度

2）编写函数实现两数交换

C++：

使用指针或者引用都可以

Java：

如果单独使用函数，比较困难，可以参考：https://blog.csdn.net/qq_36781237/article/details/93854899

由于Java没有引用，是值传递，所以实现很困难

3）获取容器大小

C++：XXX.size()

Java：XXX.length
